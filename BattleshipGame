import java.util.Scanner;

public class BattleshipGame {

  public static void main(String[] args) {
    int[][] player1Board = new int[8][8];
    int[][] player2Board = new int[8][8];
    int player1Ships = 4;
    int player2Ships = 4;
    Scanner scanner = new Scanner(System.in);

    // player 1 places their ships
    System.out.println("Player 1, please place your ships:");
    placeShips(player1Board, scanner);
    
    // player 2 places their ships
    System.out.println("Player 2, please place your ships:");
    placeShips(player2Board, scanner);
    
    
    // start the game
    int currentPlayer = 1;
    while (true) {
      System.out.println(
        "Player " + currentPlayer + ", make your guess (e.g. 1,7):"
      );
      String guess = scanner.nextLine().toUpperCase();

      String[] rowColumn = guess.split(",");
      int row = Integer.parseInt(rowColumn[0]) - 1;
      int column = Integer.parseInt(rowColumn[1]) - 1;
      if (row > 7 || column > 7) {
        System.out.println(
          "Ship row and column coordinate should not be greater than 8. Please try again."
        );
        continue;
      }
      
      // check if the guess hits a ship
      boolean validGuess;
      int shipID;
      if (currentPlayer == 1) {
        shipID = player2Board[row][column];
        validGuess = guessShipCheck(player2Board, row, column);
      } else {
        shipID = player1Board[row][column];
        validGuess = guessShipCheck(player1Board, row, column);
      }
      
      //check if ship is destroyed or player won
      if (validGuess) {
        int shipsRemaining = shipDestroyed(
          currentPlayer == 1 ? player2Board : player1Board,
          shipID,
          currentPlayer == 1 ? player2Ships : player1Ships
        );
        if (currentPlayer == 1) {
          player2Ships = shipsRemaining;
        } else {
          player1Ships = shipsRemaining;
        }
        if (shipsRemaining == 0) {
          System.out.println("Player " + currentPlayer + " wins!");
          break;
        }
        //change player
        currentPlayer = (currentPlayer == 1) ? 2 : 1;
      }
    }
  }

  public static boolean guessShipCheck(int[][] board, int row, int column) {
    boolean validGuess = true;
    if (board[row][column] > 0) {
      System.out.println("Hit!");
    } else if (board[row][column] == -1) {
      System.out.println("Already guessed!");
      validGuess = false;
    } else {
      System.out.println("Miss!");
    }
    board[row][column] = -1;
    return validGuess;
  }

  // place the ships for a player
  public static void placeShips(int[][] board, Scanner scanner) {
    int numShips = 1;
    while (numShips < 5) {
      System.out.println(
        "Enter the coordinates for ship " +
        numShips +
        " (e.g. 1,1 1,2 1,3 1,4):"
      );
      String input = scanner.nextLine().toUpperCase();
      String[] coordinates = input.split(" ");
      int[] intCoords = new int[4];
      boolean exceedingArrayLimit = false;
      // convert the coordinates to integers
      for (int i = 0; i < 4; i++) {
        String[] rowColumn = coordinates[i].split(",");
        int row = Integer.parseInt(rowColumn[0]) - 1;
        int col = Integer.parseInt(rowColumn[1]) - 1;
        if (row > 7 || col > 7) {
          exceedingArrayLimit = true;
        }
        intCoords[i] = row * 10 + col;
      }
      //check if input coordinates exceeds array limit
      if (exceedingArrayLimit) {
        System.out.println(
          "Ship row and column coordinate should not be greater than 8. Please try again."
        );
        continue;
      }

      // check if the ship coordinates are in a straight line
      if (!areCoordinatesInStraightLine(intCoords)) {
        System.out.println(
          "Ship coordinates must be in a straight line. Please try again."
        );
        continue;
      }

      // check if the ship coordinates overlap with another ship
      if (doCoordinatesOverlap(intCoords, board)) {
        System.out.println(
          "Ship coordinates cannot overlap with another ship. Please try again."
        );
        continue;
      }

      // place the ship on the board. ship id is placed in respective coordinates
      for (int i = 0; i < 4; i++) {
        int row = intCoords[i] / 10;
        int col = intCoords[i] % 10;
        board[row][col] = numShips;
      }

      numShips++;
    }
  }

  // check if the ship coordinates are in a straight line
  public static boolean areCoordinatesInStraightLine(int[] coordinates) {
    int row1 = coordinates[0] / 10;
    int col1 = coordinates[0] % 10;
    int row2 = coordinates[1] / 10;
    int col2 = coordinates[1] % 10;
    int row3 = coordinates[2] / 10;
    int col3 = coordinates[2] % 10;
    int row4 = coordinates[3] / 10;
    int col4 = coordinates[3] % 10;

    if (row1 == row2 && row2 == row3 && row3 == row4) {
      // horizontal line
      if (
        Math.abs(col1 - col2) == 1 &&
        Math.abs(col2 - col3) == 1 &&
        Math.abs(col3 - col4) == 1
      ) {
        return true;
      }
    } else if (col1 == col2 && col2 == col3 && col3 == col4) {
      // vertical line
      if (
        Math.abs(row1 - row2) == 1 &&
        Math.abs(row2 - row3) == 1 &&
        Math.abs(row3 - row4) == 1
      ) {
        return true;
      }
    }

    return false;
  }

  // check if the ship coordinates overlap with another ship
  public static boolean doCoordinatesOverlap(int[] coordinates, int[][] board) {
    for (int coord : coordinates) {
      int row = coord / 10;
      int col = coord % 10;
      if (board[row][col] == 1) {
        return true;
      }
    }

    return false;
  }

  // check if a player has won the game
  public static boolean hasPlayerWon(int shipsRemaining) {
    if (shipsRemaining > 0) return false;
    return true;
  }

  // check if a ship has been destroyed
  public static int shipDestroyed(
    int[][] board,
    int shipID,
    int shipsRemaining
  ) {
    for (int i = 0; i < 8; i++) {
      for (int j = 0; j < 8; j++) {
        if (board[i][j] == shipID) {
          return shipsRemaining;
        }
      }
    }
    shipsRemaining -= 1;
    System.out.println(
      "Ship Destroyed! " + shipsRemaining + "/4 ships remaining for opponent."
    );
    return shipsRemaining;
  }
}
